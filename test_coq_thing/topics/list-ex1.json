{
  "definitions": [
    {
      "name": "list",
      "is_function" : "false",
      "display_name": "lists",
      "text":
        {
          "english" : "Let \\(A\\) be a set. The set \\(L_A\\) of lists of elements of \\( A \\) is defined as follows: <ul style=\"padding : 15px;\"><li>Base Clause: \\([] \\in L_A\\)</li><li>Inductive Clause: \\(\\forall a \\in A .\\; \\forall l \\in L_A .\\; a :: [] \\in L_A \\).</li></ul>The notation \\( a::b::c::[] \\) is equivalent to \\([a, b, c]\\).",
          "italiano": "Sia \\(A\\) un insieme. L'insieme \\(L_A\\) delle liste di elementi di \\( A \\) è definito come segue: <ul style=\"padding : 15px;\"><li>Clausola Base: \\([] \\in L_A\\)</li><li> Clausola Induttiva: \\(\\forall a \\in A .\\; l \\in L_A .\\; a :: [] \\in L_A \\).</li></ul>La notazione \\( a::b::c::[] \\) è equivalente alla notazione \\([a, b, c]\\)."
        },
      "coq": "Notation Bool := bool.\nVariable A : Type.\nVariable eqA : A -> A -> Bool.\nInfix \"==\" := eqA (at level 60). \nNotation \"x || y\" := (orb x y).\nInductive list : Type := | nil : list | cons : A -> list -> list.\nInfix \"::\" := cons (at level 60, right associativity).\nNotation \"[ ]\" := nil (format \"[ ]\").\nNotation \"[ x ]\" := (cons x nil).\nNotation \"[ x ; y ; .. ; z ]\" := (cons x (cons y .. (cons z nil) ..)).\n"
    },
    {
      "name": "app",
      "is_function" : "true",
      "arity" : 2,
      "display_name": "app",
      "text":
      {
        "english" : "Let \\( \\texttt {app} : L_A \\times L_A \\to L_A \\) be defined as follows:<ul style=\"padding : 15px;\"><li>Base Clause: \\( \\texttt{app}([], l_2) = l_2 \\)</li><li>Inductive Clause: \\( \\texttt{app}(a :: l_1, l_2) =  \\texttt{app} a :: (l_1, l_2) \\).</li></ul>",
        "italiano" : "Sia \\( \\texttt {app} : L_A \\times L_A \\to L_A \\) definita come segue:<ul style=\"padding : 15px;\"><li>Clausola Base: \\( \\texttt{app}([], l_2) = l_2 \\)</li><li>Clausola Induttiva: \\( \\texttt{app}(a :: l_1, l_2) =  a :: \\texttt{app} (l_1, l_2) \\).</li></ul>"
      },
      "coq": "Fixpoint app (x y : list) : list := match x with | [] => y | x::xs => x :: app xs y end.\n"
    },
    {
      "name": "rev",
      "is_function": "true",
      "arity": 1,
      "display_name": "rev",
      "text":
      {
        "english" : "Let \\( \\texttt{rev} : L_A \\to L_A \\) be defined as follows:<ul style=\"padding : 15px\"><li>Base Clause: \\( \\texttt{rev}([]) = [] \\)</li><li>Inductive Clause: \\( \\texttt{rev}(a :: l') = \\texttt{app}(\\texttt{rev}(l'), [a]) \\).</li></ul>",
        "italiano" : "Sia \\( \\texttt{rev} : L_A \\to L_A \\) definito come segue:<ul style=\"padding : 15px\"><li>Clausola Base: \\( \\texttt{rev}([]) = [] \\)</li><li>Clausola Induttiva: \\( \\texttt{rev}(a :: l') = \\texttt{app}(\\texttt{rev}(l'), [a]) \\).</li></ul>"
      },
      "coq": "Fixpoint rev (l : list) : list := match l with | [] => [] | a :: l' => app (rev l') [a] end.\n"
    },
    {
      "name": "belList",
      "is_function" : "true",
      "arity" : 2,
      "display_name": "belList",
      "text":
      {
        "english" : "Let \\( \\texttt {belList} : L_A \\times A \\to Bool \\) be defined as follows:<ul style=\"padding : 15px;\"><li>Base Clause: \\( \\texttt{belList}([], b) = \\texttt{false} \\)</li><li>Inductive Clause: \\( \\texttt{belList}(a :: l, b) = \\begin{cases} \\texttt{true} & \\text{if}\\; a == b\\\\ \\texttt{belList}(l, b) & \\text{otherwise}\\end{cases} \\)</li></ul>",
        "italiano" : "Sia \\( \\texttt {belList} : L_A \\times A \\to Bool \\) definita come segue:<ul style=\"padding : 15px;\"><li>Clausola Base: \\( \\texttt{belList}([], b) = \\texttt{false} \\)</li><li>Clausola Induttiva: \\( \\texttt{belList}(a :: l, b) = \\begin{cases} \\texttt{true} & \\text{if}\\; a == b\\\\ \\texttt{belList}(l, b) & \\text{otherwise}\\end{cases}\\)</li></ul>"
      },
      "coq": "Fixpoint belList (l : list) (b : A) : Bool := match l with | [] => false | a::l' => if a == b then true else belList l' b end.\n"
    }

      ],
    "theorems": [
    {
      "name": "app_base_clause",
      "display_name": {
        "english": "app (base clause)",
        "italiano": "app (clausola base)"
      },
      "text": {
        "english": "Base clause of definition of \\(\\texttt{app}\\):\n\n\\[ \\forall l_2 \\in L_A .\\; \\texttt{app}([], l_2) = l_2 \\]",
        "italiano": "Clausola base della definizione di \\(\\texttt{app}\\):\n\n\n\\[ \\forall l_2 \\in L_A .\\; \\texttt{app}([], l_2) = l_2 \\]"
      },
      "coq": "Theorem app_base_clause : forall (l2 : list), app [] l2 = l2.\nProof.\nAdmitted."
    },
    {
      "name": "app_inductive_clause",
      "display_name": {
        "english": "app (inductive clause)",
        "italiano": "app (clausola induttiva)"
      },
      "text": {
        "english": "Inductive clause of the definition of \\(\\texttt{app}\\):\n\n\\[ \\forall l_1,l_2 \\in L_A .\\; \\forall a \\in A .\\; \\texttt{app}(a :: l_1, l_2) = \\texttt{app} (l_1, l_2) \\]",
        "italiano": "Clausola induttiva della definizione di \\(\\texttt{app}\\):\n\n\\[ \\forall l_1,l_2 \\in L_A .\\; \\forall a \\in A .\\; \\texttt{app}(a :: l_1, l_2) = \\texttt{app} (l_1, l_2) \\]"
      },
      "coq": "Theorem app_inductive_clause : forall (l1 : list) (l2 : list) (a : A) , app (a :: l1) l2 = a :: app l1 l2.\nProof.\nAdmitted."
    },
    {
      "display_name": {
        "english": "rev (base clause)",
        "italiano": "rev (clausola base)"
      },
      "name": "rev_base_clause",
      "text":
        {
          "english": "Base clause of the definition of \\(\\texttt{rev}\\): \\[ \\texttt{rev}([]) = [] \\]",
          "italiano": "Clausola base della definizione di \\(\\texttt{rev}\\): \\[ \\texttt{rev}([]) = [] \\]"
        },
        "coq": "Theorem rev_base_clause : rev [] = [].\nProof.\nAdmitted.\n"
    },
    {
      "display_name": {
        "english": "rev (inductive clause)",
        "italiano": "rev (clausola induttiva)"
      },
      "name": "rev_inductive_clause",
      "text":
        {
          "english": "Inductive clause of the definition of \\(\\texttt{rev}\\): \\[ \\forall l \\in L_A . \\forall a \\in A . \\; \\texttt{rev}(a :: l) = \\texttt{app}(\\texttt{rev}(l), [a]) \\]",
          "italiano": "Clausola induttiva della definizione di \\(\\texttt{rev}\\): \\[ \\forall l \\in L_A . \\; \\forall a \\in A . \\; \\texttt{rev}(a :: l) = \\texttt{app}(\\texttt{rev}(l), [a]) \\]"
        },
      "coq": "Theorem rev_inductive_clause: forall l : list , forall a : A , rev (a :: l) = app (rev l) [a].\nProof.\nAdmitted.\n"
        },
    {
      "name": "belList_base_clause",
      "display_name": {
        "english": "belList (base clause)",
        "italiano": "belList (clausola base)"
      },
      "text": {
        "english": "Base clause of definition of \\(\\texttt{belList}\\):\\[ \\forall b \\in A .\\; \\texttt{belList}([], b) = \\texttt{false} \\]",
        "italiano": "Clausola base della definizione di \\(\\texttt{belList}\\):\\[ \\forall b \\in A .\\; \\texttt{belList}([], b) = \\texttt{false} \\]"
      },
      "coq": "Theorem belList_base_clause : forall (b : A), belList [] b = false.\nProof.\nAdmitted."
    },
    {
      "name": "belList_inductive_clause",
      "display_name": {
        "english": "belList (inductive clause)",
        "italiano": "belList (clausola induttiva)"
      },
      "text": {
        "english": "Inductive clause of the definition of \\(\\texttt{belList}\\): \\begin{multline} \\forall l \\in L_A.\\; \\forall a,b \\in A .\\\\ \\texttt{belList}(a :: l, b) = \\begin{cases} \\texttt{true} & \\text{if}\\; a == b\\\\ \\texttt{belList}(l, b) & \\text{otherwise}\\end{cases} \\end{multline}",
        "italiano": "Clausola induttiva della definizione di \\(\\texttt{belList}\\): \\begin{multline} \\forall l \\in L_A.\\; \\forall a,b \\in A .\\\\ \\texttt{belList}(a :: l, b) = \\begin{cases} \\texttt{true} & \\text{if}\\; a == b\\\\ \\texttt{belList}(l, b) & \\text{otherwise}\\end{cases} \\end{multline}"
      },
      "coq": "Theorem belList_inductive_clause : forall (l : list) , forall (a b : A) , belList (a :: l) b = if a == b then true else belList l b.\nProof.\nAdmitted."
    },
    {
      "display_name": {
          "english": "\\(\\vee\\) absorbtion",
          "italiano": "Assorbimento \\(\\vee\\)"
        },
      "name": "or_absorbtion",
      "text":
          {
            "english": "\\(\\texttt{true}\\) is the absorbing element of \\(\\vee\\): \\[ \\forall b \\in Bool.\\; \\texttt{true} \\vee b = \\texttt{true} \\]",
            "italiano": "\\(\\texttt{true}\\) è l'elemento assorbente di \\(\\vee\\): \\[ \\forall b \\in Bool.\\; \\texttt{true} \\vee b = \\texttt{true} \\]"
          },
        "coq": "Theorem or_absorbtion : forall b : Bool , true || b = true.\nProof.\nreflexivity.\nQed."
    },
    {
      "display_name": {
          "english": "\\(\\vee\\) identity",
          "italiano": "Unità \\(\\vee\\)"
        },
      "name": "or_identity",
      "text":
          {
            "english": "\\(\\texttt{false}\\) is the identity element of \\(\\vee\\): \\[ \\forall b \\in Bool.\\; \\texttt{false} \\vee b = b \\]",
            "italiano": "\\(\\texttt{false}\\) è l'elemento neutro di \\(\\vee\\): \\[ \\forall b \\in Bool.\\; \\texttt{false} \\vee b = b \\]"
          },
        "coq": "Theorem or_identity : forall b : Bool , false || b = b.\nProof.\nreflexivity.\nQed."
    },
    {
      "display_name": {
          "english": "\\(\\vee\\) commutativity",
          "italiano": "Commutatività \\(\\vee\\)"
        },
      "name": "or_comm",
      "text":
          {
            "english": "\\(\\vee\\) is commutative:: \\[ \\forall a,b \\in Bool.\\; a \\vee b = b \\vee a \\]",
            "italiano": "\\(\\vee\\) è commutativa: \\[ \\forall a,b \\in Bool.\\; a \\vee b = b \\vee a \\]"
          },
        "coq": "Theorem or_comm : forall a b : Bool , a || b = b || a.\nProof.\nAdmitted.\n"
    },
    {
      "display_name": {
          "english": "app of empty list",
          "italiano": "app di lista vuota"
        },
      "name": "app_empty",
      "text":
          {
            "english": "\\(\\texttt{app}\\) of a list and the empty list is equal to the original list: \\[ \\forall l_1 \\in L_A.\\; \\texttt{app}(l_1,[]) = l_1 \\]",
            "italiano": "\\(\\texttt{app}\\) di una lista e la lista vuota equivale alla lista originale: \\[ \\forall l_1 \\in L_A.\\; \\texttt{app}(l_1,[]) = l_1 \\]"
          },
        "coq": "Theorem app_empty : forall l1 : list , app l1 [] = l1.\nProof.\nAdmitted.\n"
    },
    {
      "display_name": {
          "english": "app associativity",
          "italiano": "associatività app"
      },
      "name": "app_assoc",
      "text":
          {
            "english": "\\(\\texttt{app}\\) is associative: \\[ \\forall l_1,l_2,l_3 \\in L_A.\\; \\texttt{app}(\\texttt{app}(l_1,l_2),l_3) = \\texttt{app}(l_1,\\texttt{app}(l_2,l_3)) \\]",
            "italiano": "\\(\\texttt{app}\\) è associativa: \\[ \\forall l_1,l_2,l_3 \\in L_A.\\; \\texttt{app}(\\texttt{app}(l_1,l_2),l_3) = \\texttt{app}(l_1,\\texttt{app}(l_2,l_3)) \\]"
          },
      "coq": "Theorem app_assoc: forall l1 l2 l3 : list , app (app l1 l2) l3 = app l1 (app l2 l3).\nProof.\nAdmitted.\n"
    },
    {
      "display_name": {
          "english": "belList app interaction",
          "italiano": "interazione belList app"
        },
      "name": "belList_app",
      "text":
          {
            "english": "Interaction between \\(\\texttt{belList}\\) and \\(\\texttt{app}\\), i.e. \\begin{multline} \\forall l_1,l_2 \\in L_A . \\; \\forall b \\in A. \\\\ \\texttt{belList}(\\texttt{app}(l_1,l_2),b) = \\texttt{belList}(l_1,b) \\vee \\texttt{belList}(l_2,b) \\end{multline}\\(\\texttt{false}\\) is the identity element of \\(\\vee\\): \\[ \\forall b \\in Bool.\\; \\texttt{false} \\vee b = b \\]",
        "italiano" : "Interazione fra \\(\\texttt{belList}\\) e \\(\\texttt{app}\\), i.e. \\begin{gather*} \\forall l_1,l_2 \\in L_A . \\; \\forall b \\in A. \\\\ \\texttt{belList}(\\texttt{app}(l_1,l_2),b) =\\\\ \\texttt{belList}(l_1,b) \\vee \\texttt{belList}(l_2,b) \\end{gather*}"
          },
    "coq": "Theorem belList_app: forall l1 l2 : list , forall b : A , belList (app l1 l2) b = belList l1 b || belList l2 b.\nProof.\nAdmitted.\n"
    }
  ],
  "tactics" : [
    {
      "name": "induction",
      "n_params" : 1,
      "param_types" : ["text"],
      "text":
        {
          "english" : "Proof by induction. Enter the induction variable:",
          "italiano" : "Dimostrazione per induzione. Inserisci la variabile d'induzione:"
        },
      "coq" : "induction $0."
    },

    {
      "name": "intro",
      "n_params" : 0,
      "text":
        {
          "english" : "Introduce a variable:\\[ \\texttt{\"} P \\to Q \\texttt{\"} \\text{ becomes }\\texttt{\"}\\text{given $P$ prove $Q$}\\texttt{\"} \\]\\[ \\texttt{\"}\\forall (x : A) , P\\texttt{\"} \\text{ becomes } \\texttt{\"}\\text{given $(x : A)$ prove $P$}\\texttt{\"} \\]",
          "italiano" : "Introduce una variabile:\\[ \\texttt{\"} P \\to Q \\texttt{\"} \\text{ diventa }\\texttt{\"}\\text{dato $P$ dimostra $Q$}\\texttt{\"} \\]\\[ \\texttt{\"}\\forall (x : A) , P\\texttt{\"} \\text{ diventa } \\texttt{\"}\\text{dato $(x : A)$ dimostra $P$}\\texttt{\"} \\]"
        },
      "coq" : "intro."
    },

    {
      "name": "reflexivity",
      "n_params" : 0,
      "text":
        {
          "english" : "Equality is reflexive.\\[ \\texttt{\"}A = A\\texttt{\"} \\text{ becomes } \\texttt{\"true\"}\\]",
          "italiano" : "L'uguaglianza è riflessiva.\\[ \\texttt{\"}A = A\\texttt{\"} \\text{ diventa } \\texttt{\"vero\"}\\]"
        },
      "coq" : "reflexivity."
    },

    {
      "name": "destruct",
      "n_params" : 1,
      "param_types" : ["text"],
      "text":
        {
          "english" : "Proof by cases. Insert the expression on which the proof will be split:",
          "italiano" : "Dimostrazione per casi. Inserire l'espressione su cui dividere i casi:"
        },
      "coq" : "destruct_with_eqn ($0)."
    },
    
    {
      "name": "simplify arithmetic",
      "n_params" : 0,
      "text":
        {
          "english" : "Simplify an arithmetic expression, i.e. \\[x+7+y+0+3=2+x+3+4+y+1\\] becomes \\[x+y+10=x+y+10\\]",
          "italiano" : "Semplifica una espressione aritmetica, i.e. \\[x+7+y+0+3=2+x+3+4+y+1\\] diventa \\[x+y+10=x+y+10\\]"
        },
      "coq" : "ring_simplify."
    }
  ]
}
