{
  "definitions": [
    {
      "name": "list",
      "is_function" : "false",
      "display_name": "lists",
      "text":
        {
          "english" : "Let \\(A\\) be a set. The set \\(L_A\\) of lists of elements of \\( A \\) is defined as follows: <ul style=\"padding : 15px;\"><li>Base Clause: \\([] \\in L_A\\)</li><li>Inductive Clause: \\(\\forall a \\in A .\\; \\forall l \\in L_A .\\; a :: [] \\in L_A \\).</li></ul>The notation \\( a::b::c::[] \\) is equivalent to \\([a, b, c]\\).",
          "italiano": "Sia \\(A\\) un insieme. L'insieme \\(L_A\\) delle liste di elementi di \\( A \\) è definito come segue: <ul style=\"padding : 15px;\"><li>Clausola Base: \\([] \\in L_A\\)</li><li> Clausola Induttiva: \\(\\forall a \\in A .\\; l \\in L_A .\\; a :: [] \\in L_A \\).</li></ul>La notazione \\( a::b::c::[] \\) è equivalente alla notazione \\([a, b, c]\\)."
        },
      "coq": "Require Import Arith.\nInductive listn : Type := | nil : listn | cons : nat -> listn -> listn.\nInfix \"::\" := cons (at level 60, right associativity).\nNotation \"[ ]\" := nil (format \"[ ]\").\nNotation \"[ x ]\" := (cons x nil).\nNotation \"[ x ; y ; .. ; z ]\" := (cons x (cons y .. (cons z nil) ..)).\n"
    },
    {
      "name": "app",
      "is_function" : "true",
      "arity" : 2,
      "display_name": "app",
      "text":
      {
        "english" : "Let \\( \\texttt {app} : L_A \\times L_A \\to L_A \\) be defined as follows:<ul style=\"padding : 15px;\"><li>Base Clause: \\( \\texttt{app}([], l_2) = l_2 \\)</li><li>Inductive Clause: \\( \\texttt{app}(a :: l_1, l_2) =  \\texttt{app} a :: (l_1, l_2) \\).</li></ul>",
        "italiano" : "Sia \\( \\texttt {app} : L_A \\times L_A \\to L_A \\) definita come segue:<ul style=\"padding : 15px;\"><li>Clausola Base: \\( \\texttt{app}([], l_2) = l_2 \\)</li><li>Clausola Induttiva: \\( \\texttt{app}(a :: l_1, l_2) =  a :: \\texttt{app} (l_1, l_2) \\).</li></ul>"
      },
      "coq": "Fixpoint app (x y : listn) : listn := match x with | [] => y | x::xs => x :: app xs y end.\n"
    },
    {
      "name": "sumList",
      "is_function" : "true",
      "arity" : 1,
      "display_name": "sumList",
      "text":
      {
        "english" : "Let \\( \\texttt {sumList} : L_\\mathbb{N} \\to \\mathbb{N} \\) be defined as follows:<ul style=\"padding : 15px;\"><li>Base Clause: \\( \\texttt{sumList}([]) = 0 \\)</li><li>Inductive Clause: \\( \\texttt{sumList}(n :: l) = \\texttt{sumList}(l) + n \\)</li></ul>",
        "italiano" : "Sia \\( \\texttt {sumList} : L_\\mathbb{N} \\to \\mathbb{N} \\) definita come segue:<ul style=\"padding : 15px;\"><li>Clausola Base: \\( \\texttt{sumList}([]) = 0 \\)</li><li>Clausola Induttiva: \\( \\texttt{sumList}(n :: l) = \\texttt{sumList}(l) + n \\)</li></ul>"
      },
      "coq": "Fixpoint sumList (l : listn) : nat := match l with | [] => 0 | n :: l => sumList l + n end.\n"
    }

      ],
    "theorems": [
    {
      "name": "app_base_clause",
      "display_name": {
        "english": "app (base clause)",
        "italiano": "app (clausola base)"
      },
      "text": {
        "english": "Base clause of definition of \\(\\texttt{app}\\):\n\n\\[ \\forall l_2 \\in L_A .\\; \\texttt{app}([], l_2) = l_2 \\]",
        "italiano": "Clausola base della definizione di \\(\\texttt{app}\\):\n\n\n\\[ \\forall l_2 \\in L_A .\\; \\texttt{app}([], l_2) = l_2 \\]"
      },
      "coq": "Theorem app_base_clause : forall (l2 : listn), app [] l2 = l2.\nProof.\nAdmitted."
    },
    {
      "name": "app_inductive_clause",
      "display_name": {
        "english": "app (inductive clause)",
        "italiano": "app (clausola induttiva)"
      },
      "text": {
        "english": "Inductive clause of the definition of \\(\\texttt{app}\\):\n\n\\[ \\forall l_1,l_2 \\in L_A .\\; \\forall a \\in A .\\; \\texttt{app}(a :: l_1, l_2) = \\texttt{app} (l_1, l_2) \\]",
        "italiano": "Clausola induttiva della definizione di \\(\\texttt{app}\\):\n\n\\[ \\forall l_1,l_2 \\in L_A .\\; \\forall a \\in A .\\; \\texttt{app}(a :: l_1, l_2) = \\texttt{app} (l_1, l_2) \\]"
      },
      "coq": "Theorem app_inductive_clause : forall (l1 : listn) (l2 : listn) (a : nat) , app (a :: l1) l2 = a :: app l1 l2.\nProof.\nAdmitted."
    },
    {
      "name": "sumList_base_clause",
      "display_name": {
        "english": "sumList (base clause)",
        "italiano": "sumList (clausola base)"
      },
      "text": {
        "english": "Base clause of definition of \\(\\texttt{belList}\\):\\[ \\texttt{sumList}([]) = 0 \\]",
        "italiano": "Clausola base della definizione di \\(\\texttt{sumList}\\):\\[ \\texttt{sumList}([]) = 0 \\]"
      },
      "coq": "Theorem sumList_base_clause : sumList [] = 0.\nProof.\nreflexivity.\nQed."
    },
    {
      "name": "sumList_inductive_clause",
      "display_name": {
        "english": "sumList (inductive clause)",
        "italiano": "sumList (clausola induttiva)"
      },
      "text": {
        "english": "Inductive clause of the definition of \\(\\texttt{sumList}\\): \\begin{multline} \\forall l \\in L_\\mathbb{N}.\\; \\forall n \\in \\mathbb{N} .\\\\ \\texttt{sumList}(n :: l) = \\texttt{sumList}(l) + n \\end{multline}",
        "italiano": "Clausola induttiva della definizione di \\(\\texttt{sumList}\\): \\begin{multline} \\forall l \\in L_\\mathbb{N}.\\; \\forall n \\in \\mathbb{N} .\\\\ \\texttt{sumList}(n :: l) = \\texttt{sumList}(l) + n \\end{multline}"
      },
      "coq": "Theorem sumList_inductive_clause : forall (l : listn) (n : nat), sumList (n :: l) = sumList l + n.\nProof.\nreflexivity.\nQed."
    },
    {
      "display_name": {
          "english": "app of empty list",
          "italiano": "app di lista vuota"
        },
      "name": "app_empty",
      "text":
          {
            "english": "\\(\\texttt{app}\\) of a listn and the empty listn is equal to the original list: \\[ \\forall l_1 \\in L_A.\\; \\texttt{app}(l_1,[]) = l_1 \\]",
            "italiano": "\\(\\texttt{app}\\) di una lista e la lista vuota equivale alla lista originale: \\[ \\forall l_1 \\in L_A.\\; \\texttt{app}(l_1,[]) = l_1 \\]"
          },
        "coq": "Theorem app_empty : forall l1 : listn , app l1 [] = l1.\nProof.\nAdmitted.\n"
    },
    {
      "display_name": {
          "english": "app associativity",
          "italiano": "associatività app"
      },
      "name": "app_assoc",
      "text":
          {
            "english": "\\(\\texttt{app}\\) is associative: \\[ \\forall l_1,l_2,l_3 \\in L_A.\\; \\texttt{app}(\\texttt{app}(l_1,l_2),l_3) = \\texttt{app}(l_1,\\texttt{app}(l_2,l_3)) \\]",
            "italiano": "\\(\\texttt{app}\\) è associativa: \\[ \\forall l_1,l_2,l_3 \\in L_A.\\; \\texttt{app}(\\texttt{app}(l_1,l_2),l_3) = \\texttt{app}(l_1,\\texttt{app}(l_2,l_3)) \\]"
          },
      "coq": "Theorem app_assoc: forall l1 l2 l3 : listn , app (app l1 l2) l3 = app l1 (app l2 l3).\nProof.\nAdmitted.\n"
    }
  ],
  "tactics" : [
    {
      "name": "induction",
      "n_params" : 1,
      "param_types" : ["text"],
      "text":
        {
          "english" : "Proof by induction. Enter the induction variable:",
          "italiano" : "Dimostrazione per induzione. Inserisci la variabile d'induzione:"
        },
      "coq" : "induction $0."
    },

    {
      "name": "intro",
      "n_params" : 0,
      "text":
        {
          "english" : "Introduce a variable:\\[ \\texttt{\"} P \\to Q \\texttt{\"} \\text{ becomes }\\texttt{\"}\\text{given $P$ prove $Q$}\\texttt{\"} \\]\\[ \\texttt{\"}\\forall (x : nat) , P\\texttt{\"} \\text{ becomes } \\texttt{\"}\\text{given $(x : nat)$ prove $P$}\\texttt{\"} \\]",
          "italiano" : "Introduce una variabile:\\[ \\texttt{\"} P \\to Q \\texttt{\"} \\text{ diventa }\\texttt{\"}\\text{dato $P$ dimostra $Q$}\\texttt{\"} \\]\\[ \\texttt{\"}\\forall (x : nat) , P\\texttt{\"} \\text{ diventa } \\texttt{\"}\\text{dato $(x : nat)$ dimostra $P$}\\texttt{\"} \\]"
        },
      "coq" : "intro."
    },

    {
      "name": "reflexivity",
      "n_params" : 0,
      "text":
        {
          "english" : "Equality is reflexive.\\[ \\texttt{\"}A = A\\texttt{\"} \\text{ becomes } \\texttt{\"true\"}\\]",
          "italiano" : "L'uguaglianza è riflessiva.\\[ \\texttt{\"}A = A\\texttt{\"} \\text{ diventa } \\texttt{\"vero\"}\\]"
        },
      "coq" : "reflexivity."
    },

    {
      "name": "destruct",
      "n_params" : 1,
      "param_types" : ["text"],
      "text":
        {
          "english" : "Proof by cases. Insert the expression on which the proof will be split:",
          "italiano" : "Dimostrazione per casi. Inserire l'espressione su cui dividere i casi:"
        },
      "coq" : "destruct_with_eqn ($0)."
    },
    
    {
      "name": "simplify arithmetic",
      "n_params" : 0,
      "text":
        {
          "english" : "Simplify an arithmetic expression, i.e. \\[x+7+y+0+3=2+x+3+4+y+1\\] becomes \\[x+y+10=x+y+10\\]",
          "italiano" : "Semplifica una espressione aritmetica, i.e. \\[x+7+y+0+3=2+x+3+4+y+1\\] diventa \\[x+y+10=x+y+10\\]"
        },
      "coq" : "ring_simplify."
    }
  ]
}
