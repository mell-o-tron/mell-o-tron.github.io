{
  "definitions": [
    {
      "name": "list",
      "display_name": "lists",
      "text":
        {
          "english" : "Let \\(x :: l\\) denote the <em>concatenation</em> of the element \\(x\\) on the head of the list. The set of lists of any set \\(A\\) \\((L_A)\\) is defined as follows: <ul><li>\\([] \\in L_A\\)</li><li>\\(\\forall a \\in A . \\; \\forall l \\in L_A . \\; a :: [] \\in L_A \\).</li></ul>",
          "italiano": "Sia \\(x :: l\\) la concatenazione dell'elemento \\(x\\) in testa alla lista \\(l\\). L'insieme delle liste di un qualsiasi insimee \\(A\\) \\((L_A)\\) è definito come segue: <ul><li>\\([] \\in L_A\\)</li><li>\\(\\forall a \\in A . \\; \\forall l \\in L_A . \\; a :: [] \\in L_A \\).</li></ul>"
        },
      "coq": "Variable A : Type.\nInductive list : Type := | nil : list | cons : A -> list -> list.\nInfix \"::\" := cons (at level 60, right associativity).\nNotation \"[ ]\" := nil (format \"[ ]\").\nNotation \"[ x ]\" := (cons x nil).\nNotation \"[ x ; y ; .. ; z ]\" := (cons x (cons y .. (cons z nil) ..)).\n"
    },
    {
      "name": "app",
      "display_name": "app",
      "text":
      {
        "english" : "Let \\( app : L_A \\times L_A \\to L_A \\) be defined as follows:<ul><li>\\( app([], \\; l2) \\triangleq l2 \\)</li><li>\\( app(a :: l1', \\; l2) \\triangleq a :: app(l1', \\; l2) \\).</li></ul>",
        "italiano" : "Sia \\( app : L_A \\times L_A \\to L_A \\) definito come segue:<ul><li>\\( app([], \\; l2) \\triangleq l2 \\)</li><li>\\( app(a :: l1', \\; l2) \\triangleq a :: app(l1', \\; l2) \\).</li></ul>"
      },
      "coq": "Fixpoint app (l1 l2 : list) : list := match l1 with | [] => l2 | a :: l1' => a :: app l1' l2 end.\nArguments app : simpl never.\n"
    },
    {
      "name": "rev",
      "display_name": "rev",
      "text":
      {
        "english" : "Let \\( rev : L_A \\to L_A \\) be defined as follows: <ul><li>\\( rev([]) \\triangleq [] \\)</li><li>\\( rev(a :: l') \\triangleq app (rev(l'), \\; [a]) \\).</li></ul>",
        "italiano" : "Sia \\( rev : L_A \\to L_A \\) definito come segue:<ul><li>\\( rev([]) \\triangleq [] \\)</li><li>\\( rev(a :: l') \\triangleq app (rev(l'), \\; [a]) \\).</li></ul>"
      },
      "coq": "Fixpoint rev (l : list) : list := match l with | [] => [] | a :: l' => app (rev l') [a] end.\nArguments rev : simpl never.\n"
    }
  ],
  "theorems": [
    {
      "name": "app_nil",
      "text":
        {
          "english": "Base case of app: \\[ \\forall l2 \\in L_A . \\; app([], l2) = l2 \\]",
          "italiano": "Case base app: \\[ \\forall l2 \\in L_A . \\; app([], l2) = l2 \\]"
        },
        "coq": "Lemma app_nil : forall l2 : list, app [] l2 = l2.\nProof.\nAdmitted.\n"
    },
    {
      "name": "app_cons",
      "text":
        {
          "english": "Inductive case of app: \\[ \\forall a \\in A . \\; \\forall l1, l2 \\in L_A . \\; app(a :: l1,\\; l2) = a :: app(l1,\\; l2) \\]",
          "italiano": "Case induttivo app: \\[ \\forall a \\in A . \\; \\forall l1, l2 \\in L_A . \\; app(a :: l1,\\; l2) = a :: app(l1,\\; l2) \\]"
        },
        "coq": "Lemma app_cons : forall a : A , forall l1 l2 : list, app (a :: l1) l2 = a :: app l1 l2.\nProof.\nAdmitted.\n"
    },
    {
      "name": "rev_nil",
      "text":
        {
          "english": "Base case of rev: \\[ rev([]) = [] \\]",
          "italiano": "Case base rev: \\[ rev([]) = [] \\]"
        },
        "coq": "Lemma rev_nil : rev [] = [].\nProof.\nAdmitted.\n"
    },
    {
      "name": "rev_cons",
      "text":
        {
          "english": "Inductive case of rev: \\[ \\forall a \\in A . \\; \\forall l \\in L_A . \\; rev(a :: l) = app(rev(l),\\; [a]) \\]",
          "italiano": "Case induttivo rev: \\[ \\forall a \\in A . \\; \\forall l \\in L_A . \\; rev(a :: l) = app(rev(l),\\; [a]) \\]"
        },
        "coq": "Lemma rev_cons: forall a : A , forall l : list , rev (a :: l) = app (rev l) [a].\nProof.\nAdmitted.\n"
    },
    {
      "name": "app_empty",
      "text": {
        "english" : "",
        "italiano" : "app di l1 ed una lista vuota e' l1: \\[ \\forall l1 \\in L_A .\\; app(l1,\\;[]) = l1\\]"
      },
      "coq": "Theorem app_empty : forall l1 : list, app l1 [] = l1.\nProof.\nAdmitted.\n"
    },
    {
      "name": "app_assoc",
      "text": {
        "english" : "app is associative: \\[ \\forall l1, l2, l3 \\in L_A .\\; app(app(l1,\\; l2),\\; l3) = app(l1,\\; app(l2,\\; l3))\\]",
        "italiano" : "app e' associativa: \\[ \\forall l1, l2, l3 \\in L_A .\\; app(app(l1,\\; l2),\\; l3) = app(l1,\\; app(l2,\\; l3))\\]"
      },
      "coq": "Theorem app_assoc: forall l1 l2 l3 : list, app (app l1 l2) l3 = app l1 (app l2 l3).\nProof.\nAdmitted.\n"
    }
  ],
  "tactics" : [
    {
      "name": "induction",
      "n_params" : 1,
      "param_types" : ["text"],
      "text":
        {
          "english" : "Proof by induction. Enter the induction variable:",
          "italiano" : "Dimostrazione per induzione. Inserisci la variabile d'induzione:"
        },
      "coq" : "induction $0."
    },

    {
      "name": "intro",
      "n_params" : 0,
      "text":
        {
          "english" : "Introduce a variable:\\[ \\texttt{\"} P \\to Q \\texttt{\"} \\text{ becomes }\\texttt{\"}\\text{given $P$ prove $Q$}\\texttt{\"} \\]\\[ \\texttt{\"}\\forall (x : A) , P\\texttt{\"} \\text{ becomes } \\texttt{\"}\\text{given $(x : A)$ prove $P$}\\texttt{\"} \\]",
          "italiano" : "Introduce una variabile:\\[ \\texttt{\"} P \\to Q \\texttt{\"} \\text{ diventa }\\texttt{\"}\\text{dato $P$ dimostra $Q$}\\texttt{\"} \\]\\[ \\texttt{\"}\\forall (x : A) , P\\texttt{\"} \\text{ diventa } \\texttt{\"}\\text{dato $(x : A)$ dimostra $P$}\\texttt{\"} \\]"
        },
      "coq" : "intro."
    },

    {
      "name": "reflexivity",
      "n_params" : 0,
      "text":
        {
          "english" : "Equality is reflexive.\\[ \\texttt{\"}A = A\\texttt{\"} \\text{ becomes } \\texttt{\"true\"}\\]",
          "italiano" : "L'uguaglianza è riflessiva.\\[ \\texttt{\"}A = A\\texttt{\"} \\text{ diventa } \\texttt{\"vero\"}\\]"
        },
      "coq" : "reflexivity."
    }
  ]
}
