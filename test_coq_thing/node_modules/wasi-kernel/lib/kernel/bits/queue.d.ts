declare type IntArray = Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array;
declare class SharedQueue<A extends IntArray> {
    _data: A;
    _wait: Int32Array;
    constructor(props: SharedQueueProps<A>);
    static from<A extends IntArray>(props: SharedQueueProps<A>): SharedQueue<A>;
    to(): SharedQueueProps<A>;
    enqueue(v: number): 1 | 0;
    enqueueAll(vs: IntArray): number;
    wait(): void;
    dequeue(): number;
    dequeueSome(count: number, out: A, offset: number): number;
    isEmpty(): boolean;
}
declare type SharedQueueProps<A> = {
    data: A;
    wait?: Int32Array;
};
export { SharedQueue, SharedQueueProps };
