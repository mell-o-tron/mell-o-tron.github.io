{
  "definitions": [
    {
      "name": "nat",
      "display_name": "naturals",
      "text":
        {
          "english" : "Let \\(succ(n)\\) denote the <em>successor</em> of \\(n\\). The set of the natural numbers \\(\\mathbb N\\) is defined as follows: <ul><li>\\(0 \\in \\mathbb N\\)</li><li>\\(\\forall n \\in \\mathbb N . succ(n) \\in \\mathbb N\\).</li></ul>",
          "italiano": "Sia \\(succ(n)\\) il <em>successore</em> di \\(n\\). L'insieme dei numeri naturali \\(\\mathbb N\\) è definito come segue: <ul><li>\\(0 \\in \\mathbb N\\)</li><li>\\(\\forall n \\in \\mathbb N . succ(n) \\in \\mathbb N\\).</li></ul>"
        },
      "coq": "Inductive nat : Type := | zero : nat | succ : nat -> nat.\nNotation \"0\" := (zero).\n"
    },
    {
      "name": "add",
      "display_name": "+",
      "text":
      {
        "english" : "Let \\( ({+}) : \\mathbb N \\times \\mathbb N \\to \\mathbb N \\) be defined as follows:<ul><li>\\(0 + m \\triangleq m\\)</li><li>\\( succ (n) + m \\triangleq succ (n + m) \\).</li></ul>",
        "italiano" : "Sia \\( ({+}) : \\mathbb N \\times \\mathbb N \\to \\mathbb N \\) definito come segue:<ul><li>\\(0 + m \\triangleq m\\)</li><li>\\( succ (n) + m \\triangleq succ (n + m) \\).</li></ul>"
      },
      "coq": "Fixpoint add (n m : nat) : nat := match n with | 0 => m | succ n' => succ (add n' m) end.\nNotation \"A + B\" := (add A B).\n"
    }
  ],
  "theorems": [
  {
    "name": "add_dist",
    "text":
      {
        "english" : "Addition is distributive: \\[ \\forall a, b, c \\in \\mathbb N . (a + b) + c = a + (b + c) \\]",
        "italiano" : "L'addizione è distributiva: \\[ \\forall a, b, c \\in \\mathbb N . (a + b) + c = a + (b + c) \\]"
      },
    "coq": "Theorem add_dist : forall a b c : nat, add (add a b) c = add a (add b c).\nProof.\nAdmitted.\n"
  },
  {
    "name": "add_zero_left",
    "text":
      {
        "english" : "0 is the left identity for +:\\[ \\forall a \\in \\mathbb N . 0 + a = a \\]",
        "italiano" : "0 è l'identità sinistra per +:\\[ \\forall a \\in \\mathbb N . 0 + a = a \\]"
      },
    "coq": "Theorem add_zero_left : forall a : nat, add 0 a = a.\nProof.\nAdmitted.\n"
  },
  {
    "name": "add_zero_right",
    "text":
      {
        "english" : "0 is the right identity for +:\\[ \\forall a \\in \\mathbb N . a + 0 = a \\]",
        "italiano" : "0 è l'identità destra per +:\\[ \\forall a \\in \\mathbb N . a + 0 = a \\]"
      },

    "coq": "Theorem add_zero_right : forall a : nat, add a 0 = a.\nProof.\nAdmitted.\n"
  },
  {
    "name": "add_succ",
    "text":
      {
        "english" : "The following holds\\[ \\forall (a\\; b : \\mathbb N) , a + succ(b) = succ(a + b) \\]",
        "italiano" : "Vale il seguente\\[ \\forall (a\\; b : \\mathbb N) , a + succ(b) = succ(a + b) \\]"
      },
    "coq": "Theorem add_succ : forall a b : nat, (a + succ b) = succ(a + b).\nProof.\nAdmitted.\n"
  }
  ],
  "tactics" : [
    {
      "name": "induction",
      "n_params" : 1,
      "param_types" : ["text"],
      "text":
        {
          "english" : "Proof by induction. Enter the induction variable:",
          "italiano" : "Dimostrazione per induzione. Inserisci la variabile d'induzione:"
        },
      "coq" : "induction $0.\n"
    },

    {
      "name": "intro",
      "n_params" : 0,
      "text":
        {
          "english" : "Introduce a variable:\\[ \\texttt{\"} P \\to Q \\texttt{\"} \\text{ becomes }\\texttt{\"}\\text{given $P$ prove $Q$}\\texttt{\"} \\]\\[ \\texttt{\"}\\forall (x : A) , P\\texttt{\"} \\text{ becomes } \\texttt{\"}\\text{given $(x : A)$ prove $P$}\\texttt{\"} \\]",
          "italiano" : "Introduce una variabile:\\[ \\texttt{\"} P \\to Q \\texttt{\"} \\text{ diventa }\\texttt{\"}\\text{dato $P$ dimostra $Q$}\\texttt{\"} \\]\\[ \\texttt{\"}\\forall (x : A) , P\\texttt{\"} \\text{ diventa } \\texttt{\"}\\text{dato $(x : A)$ dimostra $P$}\\texttt{\"} \\]"
        },
      "coq" : "intro.\n"
    },

    {
      "name": "reflexivity",
      "n_params" : 0,
      "text":
        {
          "english" : "Equality is reflexive.\\[ \\texttt{\"}A = A\\texttt{\"} \\text{ becomes } \\texttt{\"true\"}\\]",
          "italiano" : "L'uguaglianza è riflessiva.\\[ \\texttt{\"}A = A\\texttt{\"} \\text{ diventa } \\texttt{\"vero\"}\\]"
        },
      "coq" : "reflexivity.\n"
    },

    {
      "name": "apply definition",
      "n_params" : 2,
      "param_types" : ["definitions", "text"],
      "text":
        {
          "english" : "Apply a definition. Choose the definition from the menu. Optional: use the input box to specify an occurrence writing:\\[ \\texttt{at occ} \\]where \\[\\texttt{occ}\\]is a number starting from 1",
          "italiano" : "Applica una definizione. Scegli una definizione dal menu. Puoi specificare un'occorrenza tramite l'area di testo scrivendo:\\[ \\texttt{at occ} \\]dove \\[\\texttt{occ}\\]è un numero a partire da 1"
        },
      "coq" : "simpl $0 $1.\n"
    }
  ]
}
