{
  "definitions": [
    {
      "name": "list",
      "is_function" : "false",
      "display_name": "lists",
      "text":
        {
          "english" : "Let \\(A\\) be a set. The set \\(L_A\\) of lists of elements of \\( A \\) is defined as follows: <ul style=\"padding : 15px;\"><li>Base Clause: \\([] \\in L_A\\)</li><li>Inductive Clause: \\(\\forall a \\in A . \\forall l \\in L_A . a :: [] \\in L_A \\).</li></ul>The notation \\( a::b::c::[] \\) is equivalent to \\([a, b, c]\\).",
          "italiano": "Sia \\(A\\) un insieme. L'insieme \\(L_A\\) delle liste di elementi di \\( A \\) è definito come segue: <ul style=\"padding : 15px;\"><li>Clausola Base: \\([] \\in L_A\\)</li><li> Clausola Induttiva: \\(\\forall (a \\in A), (l \\in L_A) . a :: [] \\in L_A \\).</li></ul>La notazione \\( a::b::c::[] \\) è equivalente alla notazione \\([a, b, c]\\)."
        },"display_name": "len",
      "coq": "Require Import Arith.\nVariable A : Type.\nInductive list : Type := | nil : list | cons : A -> list -> list.\nInfix \"::\" := cons (at level 60, right associativity).\nNotation \"[ ]\" := nil (format \"[ ]\").\nNotation \"[ x ]\" := (cons x nil).\nNotation \"[ x ; y ; .. ; z ]\" := (cons x (cons y .. (cons z nil) ..)).\n"
    },
    {
      "name": "app",
      "is_function" : "true",
      "arity" : 2,
      "display_name": "app",
      "text":
      {
        "english" : "Let \\( \\texttt {app} : L_A \\times L_A \\to L_A \\) be defined as follows:<ul style=\"padding : 15px;\"><li>Base Clause: \\( \\texttt{app}([], l_2) = l_2 \\)</li><li>Inductive Clause: \\( \\texttt{app}(a :: l_1, l_2) =  \\texttt{app} a :: (l_1, l_2) \\).</li></ul>",
        "italiano" : "Sia \\( \\texttt {app} : L_A \\times L_A \\to L_A \\) definita come segue:<ul style=\"padding : 15px;\"><li>Clausola Base: \\( \\texttt{app}([], l_2) = l_2 \\)</li><li>Clausola Induttiva: \\( \\texttt{app}(a :: l_1, l_2) =  a :: \\texttt{app} (l_1, l_2) \\).</li></ul>"
      },
      "coq": "Fixpoint app (x y : list) : list := match x with | [] => y | x::xs => x :: app xs y end.\n"
    },
    {
      "name": "rev",
      "is_function": "true",
      "arity": 1,
      "display_name": "rev",
      "text":
      {
        "english" : "Let \\( \\texttt{rev} : L_A \\to L_A \\) be defined as follows:<ul style=\"padding : 15px\"><li>\\( \\texttt{rev}([]) = [] \\)</li><li>\\( \\texttt{rev}(a :: l') = \\texttt{app}( : Type\\texttt{rev}( : Typel'), [a]) \\).</li></ul>",
        "italiano" : "Sia \\( \\texttt{rev} : L_A \\to L_A \\) definito come segue:<ul style=\"padding : 15px\"><li>\\( \\texttt{rev}([]) = [] \\)</li><li>\\( \\texttt{rev}( : Typea :: l') = \\texttt{app}( : Type\\texttt{rev}( : Typel'), [a]) \\).</li></ul>"
      },
      "coq": "Fixpoint rev (l : list) : list := match l with | [] => [] | a :: l' => app (rev l') [a] end.\n"
    },
    {
      "name": "len",
      "is_function" : "true",
      "display_name": "len",
      "arity" : 1,
      "text":
      {
        "english" : "Let \\( \\texttt {len} : L_A \\to \\mathbb N \\) be defined as follows:<ul style=\"padding : 15px;\"><li>Base Clause: \\( \\texttt{len}([]) = 0 \\)</li><li>Inductive Clause: \\( \\texttt{len}(a :: l_1) =  \\texttt{len} (l_1) + 1 \\).</li></ul>",
        "italiano" : "Sia \\( \\texttt {len} : L_A \\to \\mathbb N \\) definita come segue:<ul style=\"padding : 15px;\"><li>Clausola Base: \\( \\texttt{len}([]) = 0 \\)</li><li>Clausola Induttiva: \\( \\texttt{len}(a :: l_1) =  \\texttt{len} (l_1) + 1 \\).</li></ul>"
      },
      "coq": "Fixpoint len (x : list) : nat := match x with | [] => 0 | (x :: xs) => len xs + 1 end.\n"
    }
  ],
    "theorems": [
    {
      "name": "app_base_clause",
      "display_name": {
        "english": "app (base clause)",
        "italiano": "app (clausola base)"
      },
      "text": {
        "english": "Base clause of definition of \\(\\texttt{app}\\):\n\n\\[ \\forall l_2 : L_A . \\texttt{app}([], l_2) = l_2 \\]",
        "italiano": "Clausola base della definizione di \\(\\texttt{app}\\):\n\n\n\\[ \\forall l_2 : L_A . \\texttt{app}([], l_2) = l_2 \\]"
      },
      "coq": "Theorem app_base_clause : forall (l2 : list), app [] l2 = l2.\nProof.\nAdmitted."
    },
    {
      "name": "app_inductive_clause",
      "display_name": {
        "english": "app (inductive clause)",
        "italiano": "app (clausola induttiva)"
      },
      "text": {
        "english": "Inductive clause of the definition of \\(\\texttt{app}\\):\n\n\\[ \\forall l_1\\;l_2 : L_A .\\; \\forall a : A .\\; \\texttt{app}(a :: l_1, l_2) = \\texttt{app} (l_1, l_2) \\]",
        "italiano": "Clausola induttiva della definizione di \\(\\texttt{app}\\):\n\n\\[ \\forall l_1\\;l_2 : L_A .\\; \\forall a : A .\\; . \\texttt{app}(a :: l_1, l_2) = \\texttt{app} (l_1, l_2) \\]"
      },
      "coq": "Theorem app_inductive_clause : forall (l1 : list) (l2 : list) (a : A) , app (a :: l1) l2 = a :: app l1 l2.\nProof.\nAdmitted."
    },
    {
      "display_name": {
        "english": "rev (base clause)",
        "italiano": "rev (clausola base)"
      },
      "name": "rev_base_clause",
      "text":
        {
          "english": "Base clause of the definition of \\(\\texttt{rev}\\): \\[ \\texttt{rev}([]) = [] \\]",
          "italiano": "Clausola base della definizione di \\(\\texttt{rev}\\): \\[ \\texttt{rev}([]) = [] \\]"
        },
        "coq": "Theorem rev_base_clause : rev [] = [].\nProof.\nAdmitted.\n"
    },
    {
      "display_name": {
        "english": "rev (inductive clause)",
        "italiano": "rev (clausola induttiva)"
      },
      "name": "rev_inductive_clause",
      "text":
        {
          "english": "Inductive clause of the definition of \\(\\texttt{rev}\\): \\[ \\forall l \\in L_A . \\forall a \\in A . \\; \\texttt{rev}(a :: l) = \\texttt{app}(\\texttt{rev}(l), [a]) \\]",
          "italiano": "Clausola induttiva della definizione di \\(\\texttt{rev}\\): \\[ \\forall l \\in L_A . \\; \\forall a \\in A . \\; \\texttt{rev}(a :: l) = \\texttt{app}(\\texttt{rev}(l), [a]) \\]"
        },
      "coq": "Theorem rev_inductive_clause: forall l : list , forall a : A , rev (a :: l) = app (rev l) [a].\nProof.\nAdmitted.\n"
        },
    {
      "name": "len_base_clause",
      "display_name": {
        "english": "len (base clause)",
        "italiano": "len (clausola base)"
      },
      "text": {
        "english": "Base clause of definition of \\(\\texttt{len}\\):\n\n\\[ \\texttt{len}([]) = 0 \\]",
        "italiano": "Caso base della definizione di \\(\\texttt{len}\\):\n\n\\[ \\texttt{len}([]) = 0 \\]"
      },
      "coq": "Theorem len_base_clause : len [] = 0.\nProof.\nAdmitted."
    },
    {
      "name": "len_inductive_clause",
      "display_name": {
        "english": "len (inductive clause)",
        "italiano": "len (clausola induttiva)"
      },
      "text": {
        "english": "Inductive clause of definition of \\(\\texttt{len}\\):\n\n\\[ \\forall l_1 : L_A .\\; \\forall a : A .\\; \\texttt{len}(a :: l_1) = \\texttt{len}(l_1) + 1 \\]",
        "italiano": "Clausola Induttiva della definizione di \\(\\texttt{len}\\):\n\n\\[ \\forall l_1 : L_A .\\; \\forall a : A.\\; \\texttt{len}(a :: l_1) = \\texttt{len}(l_1) + 1 \\]"
      },
      "coq": "Theorem len_inductive_clause : forall (l1 : list) (a : A), len (a :: l1) = len (l1) + 1.\nProof.\nAdmitted."
    },
    {
      "display_name": {
          "english": "app of empty list",
          "italiano": "app di lista vuota"
        },
      "name": "app_empty",
      "text":
          {
            "english": "\\texttt{app} of a list and the empty list is equal to the original list: \\[ \\forall l_1 \\in L_A.\\; \\texttt{app}(l_1,[]) = l_1 \\]",
            "italiano": "\\texttt{app} di una lista e la lista vuota equivale alla lista originale: \\[ \\forall l_1 \\in L_A.\\; \\texttt{app}(l_1,[]) = l_1 \\]"
          },
        "coq": "Theorem app_empty : forall a : A , forall l1 : list , app l1 [] = l1.\nProof.\nAdmitted.\n"
    },
    {
      "display_name": {
          "english": "app associativity",
          "italiano": "associativita' app"
      },
      "name": "app_assoc",
      "text":
          {
            "english": "\\texttt{app} is associative: \\[ \\forall l_1\\;l_2\\;l_3 \\in L_A.\\; \\texttt{app}(\\texttt{app}(l_1,l_2),l_3) = \\texttt{app}(l_1,\\texttt{app}(l_2,l_3)) \\]",
            "italiano": "\\texttt{app} e' associativa: \\[ \\forall l_1\\;l_2\\;l_3 \\in L_A.\\; \\texttt{app}(\\texttt{app}(l_1,l_2),l_3) = \\texttt{app}(l_1,\\texttt{app}(l_2,l_3)) \\]"
          },
      "coq": "Theorem app_assoc: forall l1 l2 l3 : list , app (app l1 l2) l3 = app l1 (app l2 l3).\nProof.\nAdmitted.\n"
    }
  ],
  "tactics" : [
    {
      "name": "induction",
      "n_params" : 1,
      "param_types" : ["text"],
      "text":
        {
          "english" : "Proof by induction. Enter the induction variable:",
          "italiano" : "Dimostrazione per induzione. Inserisci la variabile d'induzione:"
        },
      "coq" : "induction $0."
    },

    {
      "name": "intro",
      "n_params" : 0,
      "text":
        {
          "english" : "Introduce a variable:\\[ \\texttt{\"} P \\to Q \\texttt{\"} \\text{ becomes }\\texttt{\"}\\text{given $P$ prove $Q$}\\texttt{\"} \\]\\[ \\texttt{\"}\\forall (x : A) , P\\texttt{\"} \\text{ becomes } \\texttt{\"}\\text{given $(x : A)$ prove $P$}\\texttt{\"} \\]",
          "italiano" : "Introduce una variabile:\\[ \\texttt{\"} P \\to Q \\texttt{\"} \\text{ diventa }\\texttt{\"}\\text{dato $P$ dimostra $Q$}\\texttt{\"} \\]\\[ \\texttt{\"}\\forall (x : A) , P\\texttt{\"} \\text{ diventa } \\texttt{\"}\\text{dato $(x : A)$ dimostra $P$}\\texttt{\"} \\]"
        },
      "coq" : "intro."
    },

    {
      "name": "reflexivity",
      "n_params" : 0,
      "text":
        {
          "english" : "Equality is reflexive.\\[ \\texttt{\"}A = A\\texttt{\"} \\text{ becomes } \\texttt{\"true\"}\\]",
          "italiano" : "L'uguaglianza è riflessiva.\\[ \\texttt{\"}A = A\\texttt{\"} \\text{ diventa } \\texttt{\"vero\"}\\]"
        },
      "coq" : "reflexivity."
    },

    {
      "name": "apply definition",
      "n_params" : 2,
      "param_types" : ["definitions", "text"],
      "text":
        {
          "english" : "Apply a definition. Choose the definition from the menu. Optional: use the input box to specify an occurrence writing:\\[ \\texttt{at occ} \\]where \\[\\texttt{occ}\\]is a number starting from 1",
          "italiano" : "Applica una definizione. Scegli una definizione dal menu. Puoi specificare un'occorrenza tramite l'area di testo scrivendo:\\[ \\texttt{at occ} \\]dove \\[\\texttt{occ}\\]è un numero a partire da 1"
        },
      "coq" : "simpl $0 $1."
    },

    {
      "name": "simplify arithmetic",
      "n_params" : 0,
      "text":
        {
          "english" : "Simplify an arithmetic expression.",
          "italiano" : "Semplifica una espressione aritmetica, i.e. x+7+0+3=2+x+3+0+4+0+1 \\rightarrow x+10=x+10"
        },
      "coq" : "ring_simplify"
    }
  ]
}
