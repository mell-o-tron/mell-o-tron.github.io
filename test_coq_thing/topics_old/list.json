{
  "definitions": [
    {
      "name": "list",
      "is_function" : "false",
      "display_name": "lists",
      "text":
        {
          "english" : "Let \\(A\\) be a set. The set \\(L_A\\) of lists of elements of \\( A \\) is defined as follows: <ul style=\"padding : 15px;\"><li>Base Clause: \\([] \\in L_A\\)</li><li>Inductive Clause: \\(\\forall a \\in A . \\forall l \\in L_A . a :: [] \\in L_A \\).</li></ul>The notation \\( a::b::c::[] \\) is equivalent to \\([a, b, c]\\).",
          "italiano": "Sia \\(A\\) un insieme. L'insieme \\(L_A\\) delle liste di elementi di \\( A \\) è definito come segue: <ul style=\"padding : 15px;\"><li>Clausola Base: \\([] \\in L_A\\)</li><li> Clausola Induttiva: \\(\\forall (a \\in A), (l \\in L_A) . a :: [] \\in L_A \\).</li></ul>La notazione \\( a::b::c::[] \\) è equivalente alla notazione \\([a, b, c]\\)."
        },"display_name": "len",
      "coq": "From Coq Require Import List Arith ZArith.\nImport ListNotations.\n"
    },
    {
      "name": "len",
      "is_function" : "true",
      "display_name": "len",
      "arity" : 1,
      "text":
      {
        "english" : "Let \\( \\texttt {len} : L_{\\mathbb N} \\to \\mathbb N \\) be defined as follows:<ul style=\"padding : 15px;\"><li>Base Clause: \\( \\texttt{len}([]) = 0 \\)</li><li>Inductive Clause: \\( \\texttt{len}(a :: l_1) =  \\texttt{len} (l_1) + 1 \\).</li></ul>",
        "italiano" : "Sia \\( \\texttt {len} : L_{\\mathbb N} \\to \\mathbb N \\) definita come segue:<ul style=\"padding : 15px;\"><li>Clausola Base: \\( \\texttt{len}([]) = 0 \\)</li><li>Clausola Induttiva: \\( \\texttt{len}(a :: l_1) =  \\texttt{len} (l_1) + 1 \\).</li></ul>"
      },
      "coq": "Fixpoint len (x : list nat) : nat := match x with | [] => 0 | (x :: xs) => len xs + 1 end."
    },
    {
      "name": "app",
      "is_function" : "true",
      "arity" : 2,
      "display_name": "app",
      "text":
      {
        "english" : "Let \\( \\texttt {app} : L_{\\mathbb N} \\times L_{\\mathbb N} \\to \\mathbb N \\) be defined as follows:<ul style=\"padding : 15px;\"><li>Base Clause: \\( \\texttt{app}([], l_2) = l_2 \\)</li><li>Inductive Clause: \\( \\texttt{app}(a :: l_1, l_2) =  \\texttt{app} a :: (l_1, l_2) \\).</li></ul>",
        "italiano" : "Sia \\( \\texttt {app} : L_{\\mathbb N} \\times L_{\\mathbb N} \\to \\mathbb N \\) definita come segue:<ul style=\"padding : 15px;\"><li>Clausola Base: \\( \\texttt{app}([], l_2) = l_2 \\)</li><li>Clausola Induttiva: \\( \\texttt{app}(a :: l_1, l_2) =  a :: \\texttt{app} (l_1, l_2) \\).</li></ul>"
      },
      "coq": "Fixpoint app {B : Type} (x y : list B) : list B := match x with | [] => y | x::xs => x :: app xs y end."
    }
  ],
    "theorems": [
    {
      "name": "len_base_clause",
      "display_name": {
        "english": "len (base clause)",
        "italiano": "len (clausola base)"
      },
      "text": {
        "english": "Base clause of definition of \\(\\texttt{len}\\):\n\n\\[ \\texttt{len}([]) = 0 \\]",
        "italiano": "Caso base della definizione di \\(\\texttt{len}\\):\n\n\\[ \\texttt{len}([]) = 0 \\]"
      },
      "coq": "Theorem len_base_clause : len [] = 0.\nProof.\nAdmitted."
    },
    {
      "name": "len_inductive_clause",
      "display_name": {
        "english": "len (inductive clause)",
        "italiano": "len (clausola induttiva)"
      },
      "text": {
        "english": "Inductive clause of definition of \\(\\texttt{len}\\):\n\n\\[ \\forall (l1 : L_{\\mathbb N}), (a : \\mathbb N) . \\texttt{len}(a :: l_1) = \\texttt{len}(l_1) + 1 \\]",
        "italiano": "Clausola Induttiva della definizione di \\(\\texttt{len}\\):\n\n\\[ \\forall (l1 : L_{\\mathbb N}), (a : \\mathbb N) . \\texttt{len}(a :: l_1) = \\texttt{len}(l_1) + 1 \\]"
      },
      "coq": "Theorem len_inductive_clause : forall (l1 : list nat) (a : nat), len (a :: l1) = len (l1) + 1.\nProof.\nAdmitted."
    },
    {
      "name": "app_base_clause",
      "display_name": {
        "english": "app (base clause)",
        "italiano": "app (clausola base)"
      },
      "text": {
        "english": "Base clause of definition of \\(\\texttt{app}\\):\n\n\\[ \\forall l_2 : L_{\\mathbb N} . \\texttt{app}([], l_2) = l_2 \\]",
        "italiano": "Clausola base della definizione di \\(\\texttt{app}\\):\n\n\n\\[ \\forall l_2 : L_{\\mathbb N} . \\texttt{app}([], l_2) = l_2 \\]"
      },
      "coq": "Theorem app_base_clause : forall (l2 : list nat), app [] l2 = l2.\nProof.\nAdmitted."
    },
    {
      "name": "app_inductive_clause",
      "display_name": {
        "english": "app (inductive clause)",
        "italiano": "app (clausola induttiva)"
      },
      "text": {
        "english": "Inductive clause of definition of \\(\\texttt{app}\\):\n\n\\[ \\forall (l1\\;l2 : L_{\\mathbb N}), (a : \\mathbb N) . \\texttt{app}(a :: l_1, l_2) = \\texttt{app} (l_1, l_2) \\]",
        "italiano": "Clausola induttiva della definizione di \\(\\texttt{app}\\):\n\n\\[ \\forall (l1\\;l2 : L_{\\mathbb N}), (a : \\mathbb N) . \\texttt{app}(a :: l_1, l_2) = \\texttt{app} (l_1, l_2) \\]"
      },
      "coq": "Theorem app_inductive_clause : forall (l1 : list nat) (l2 : list nat) (a : nat) , app (a :: l1) l2 = a :: app l1 l2.\nProof.\nAdmitted."
    }
  ],
  "tactics" : [
    {
      "name": "induction",
      "n_params" : 1,
      "param_types" : ["text"],
      "text":
        {
          "english" : "Proof by induction. Enter the induction variable:",
          "italiano" : "Dimostrazione per induzione. Inserisci la variabile d'induzione:"
        },
      "coq" : "induction $0.\n"
    },

    {
      "name": "intro",
      "n_params" : 0,
      "text":
        {
          "english" : "Introduce a variable:\\[ \\texttt{\"} P \\to Q \\texttt{\"} \\text{ becomes }\\texttt{\"}\\text{given $P$ prove $Q$}\\texttt{\"} \\]\\[ \\texttt{\"}\\forall (x : A) , P\\texttt{\"} \\text{ becomes } \\texttt{\"}\\text{given $(x : A)$ prove $P$}\\texttt{\"} \\]",
          "italiano" : "Introduce una variabile:\\[ \\texttt{\"} P \\to Q \\texttt{\"} \\text{ diventa }\\texttt{\"}\\text{dato $P$ dimostra $Q$}\\texttt{\"} \\]\\[ \\texttt{\"}\\forall (x : A) , P\\texttt{\"} \\text{ diventa } \\texttt{\"}\\text{dato $(x : A)$ dimostra $P$}\\texttt{\"} \\]"
        },
      "coq" : "intro.\n"
    },

    {
      "name": "reflexivity",
      "n_params" : 0,
      "text":
        {
          "english" : "Equality is reflexive.\\[ \\texttt{\"}A = A\\texttt{\"} \\text{ becomes } \\texttt{\"true\"}\\]",
          "italiano" : "L'uguaglianza è riflessiva.\\[ \\texttt{\"}A = A\\texttt{\"} \\text{ diventa } \\texttt{\"vero\"}\\]"
        },
      "coq" : "reflexivity.\n"
    }
  ]
}
